<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Paul的博客，吐槽下生活！</title><link>https://SevenOfPaul.github.io/paul.github.io</link><description>童话是一种生活态度，仅此而已。</description><copyright>Paul的博客，吐槽下生活！</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://SevenOfPaul.github.io/paul.github.io</link></image><lastBuildDate>Fri, 05 Jul 2024 12:15:42 +0000</lastBuildDate><managingEditor>Paul的博客，吐槽下生活！</managingEditor><ttl>60</ttl><webMaster>Paul的博客，吐槽下生活！</webMaster><item><title>cpp中的const 关键字</title><link>https://SevenOfPaul.github.io/paul.github.io/post/cpp-zhong-de-const%20-guan-jian-zi.html</link><description>#const 关键字&#13;
&#13;
const关键字修饰的所有变量会保存在存储区区域，同时在获取地址时会在栈上分配一个空间&#13;
&#13;
## 基本数据类型 ##&#13;
&#13;
``````cpp&#13;
//存储区存储&#13;
const int data=1;&#13;
//在栈上分配内存返回地址也是栈上的&#13;
int *ptr2=(int*)&amp;data;&#13;
//修改的地址是栈上的地址&#13;
 *ptr2=10;&#13;
  cout&lt;&lt;'data='&lt;&lt;data&lt;&lt;'*p='&lt;&lt;*ptr2&lt;&lt;endl;&#13;
//data=1*p=10 存储区区域的数据不变&#13;
``````&#13;
&#13;
## 引用数据类型 ##&#13;
&#13;
引用数据类型和基本数据类型差距比较大&#13;
&#13;
``````cpp&#13;
//数据存储在堆上，存储区区域存储地址  &#13;
const Obj obj={'小红',12};&#13;
//读取到的地址是堆上的&#13;
    Obj *p=(Obj*)&amp;obj;&#13;
//直接修改堆上的数据&#13;
 p-&gt;name='小安';&#13;
 cout&lt;&lt;obj.name&lt;&lt;endl;&#13;
``````&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://SevenOfPaul.github.io/paul.github.io/post/cpp-zhong-de-const%20-guan-jian-zi.html</guid><pubDate>Fri, 05 Jul 2024 12:15:20 +0000</pubDate></item><item><title>玩个大活：自定义JSON（1）</title><link>https://SevenOfPaul.github.io/paul.github.io/post/wan-ge-da-huo-%EF%BC%9A-zi-ding-yi-JSON%EF%BC%881%EF%BC%89.html</link><description>今天我们来玩个大活：用cpp写一个**自定义JSON解析器**，第一天我们先来简单介绍下JSON，&#13;
## JSON类型介绍&#13;
类型 | 描述&#13;
-- | --&#13;
数字型（Number） | JavaScript 中的双精度浮点型格式&#13;
字符串型（String） | 双引号包裹的 Unicode 字符和反斜杠转义字符&#13;
布尔型（Boolean） | true 或 false&#13;
数组（Array） | 有序的值序列&#13;
值（Value） | 可以是字符串，数字，true 或 false，null 等等&#13;
对象（Object） | 无序的键:值对集合&#13;
空格（Whitespace） | 可用于任意符号对之间&#13;
null | 空&#13;
&#13;
使用JSON最简单的方式就是打开浏览器使用浏览器自带的js&#13;
```typescript&#13;
const str=JSON.stringify({name:'张三'});&#13;
const obj=JSON.parse(str);&#13;
console.log(str,obj);&#13;
```&#13;
![1720103016669](https://github.com/SevenOfPaul/paul.github.io/assets/83870824/a031e40d-f4b3-48da-86c6-1a56d5e310dd)&#13;
## 设置接口&#13;
我们可以使用`enum class`语法来定义MyJson的类型&#13;
```cpp&#13;
enum class JsonType {&#13;
    Null,Number,Boolean,String,Array,Object&#13;
};&#13;
```&#13;
欲知后事如何，且听下回分解。</description><guid isPermaLink="true">https://SevenOfPaul.github.io/paul.github.io/post/wan-ge-da-huo-%EF%BC%9A-zi-ding-yi-JSON%EF%BC%881%EF%BC%89.html</guid><pubDate>Thu, 04 Jul 2024 14:25:50 +0000</pubDate></item><item><title>力扣算法第二题 加一</title><link>https://SevenOfPaul.github.io/paul.github.io/post/li-kou-suan-fa-di-er-ti-%20-jia-yi.html</link><description># 力扣算法第二题 加一&#13;
本题的难点在于**进位** 出现9的时候就需要变成10，而题目要求每个位置只能保存一个单位的数字。</description><guid isPermaLink="true">https://SevenOfPaul.github.io/paul.github.io/post/li-kou-suan-fa-di-er-ti-%20-jia-yi.html</guid><pubDate>Tue, 02 Jul 2024 09:39:24 +0000</pubDate></item><item><title>力扣算法第一题 两数之和</title><link>https://SevenOfPaul.github.io/paul.github.io/post/li-kou-suan-fa-di-yi-ti-%20-liang-shu-zhi-he.html</link><description>**力扣算法第一题 两数之和是非常简单的一道题**&#13;
![1719896970686](https://github.com/SevenOfPaul/paul.github.io/assets/83870824/f1740bed-69aa-480b-b571-14c80101c5aa)&#13;
由于是简单题，只需要简单的暴力就可以做到了，&#13;
我们首先用冒泡排序的方式来一对一的对比。</description><guid isPermaLink="true">https://SevenOfPaul.github.io/paul.github.io/post/li-kou-suan-fa-di-yi-ti-%20-liang-shu-zhi-he.html</guid><pubDate>Tue, 02 Jul 2024 05:13:55 +0000</pubDate></item></channel></rss>